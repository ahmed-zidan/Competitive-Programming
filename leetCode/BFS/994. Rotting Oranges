class Solution {
public:
    
    
    int minute(vector<vector<int>>& grid ,queue<pair<int,int>>q,int &f){
        
        int m =0;
        
        int r = grid.size();
        int c = grid[0].size();
        while(!q.empty()){
        
            int sz = q.size();
            bool t = 0;
            while(sz--){
                auto curr = q.front();
                q.pop();
                
                
                if(curr.first +1 < r && grid[curr.first +1][curr.second] == 1){
                    grid[curr.first +1][curr.second] = 2;
                    f--;
                    q.push({curr.first +1,curr.second});
                        t = 1;
                }if(curr.first -1 >= 0 && grid[curr.first -1][curr.second] == 1){
                
                    f--;
                        grid[curr.first -1][curr.second] = 2;
                        q.push({curr.first -1,curr.second});
                        t = 1;
                
                    
                }
                if(curr.second +1 < c && grid[curr.first][curr.second+1] == 1){
                
                    f--;
                        grid[curr.first][curr.second+1] = 2;
                        q.push({curr.first,curr.second+1});
                        t = 1;
                
                    
                }
                if(curr.second - 1>= 0 && grid[curr.first][curr.second - 1] == 1){
                f--;
                        grid[curr.first][curr.second - 1] = 2;
                        q.push({curr.first,curr.second - 1});
                        t = 1;
                
                    
                }
                
            }
            if(t)
                m++;
            
            
        }
        
        return m;
        
    }
    
    int orangesRotting(vector<vector<int>>& grid) {
        
        int f = 0;
        queue<pair<int,int>>q;
        for(int i =0;i<grid.size();i++){
            for(int j = 0;j<grid[0].size();j++){
                if(grid[i][j] == 2)
                    q.push({i,j});
                else if(grid[i][j] == 1)
                    f++;
            }
        }
        
        
       int m = minute(grid,q,f);
       
        if(f == 0){
            return m;
        }else return -1;
       
        
    }
};
